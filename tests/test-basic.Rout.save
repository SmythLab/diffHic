
R version 4.4.0 (2024-04-24 ucrt) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # These are just placeholders for the real things in inst/tests.
> 
> suppressWarnings(suppressPackageStartupMessages(require(diffHic)))
> 
> hic.file <- system.file("exdata", "hic_sort.bam", package="diffHic")
> cuts <- readRDS(system.file("exdata", "cuts.rds", package="diffHic"))
> param <- pairParam(fragments=cuts)
> 
> # Setting up the parameters
> fout <- "output.h5"
> preparePairs(hic.file, param, file=fout)
$pairs
   total   marked filtered   mapped 
      32        7        3       22 

$same.id
   dangling self.circle 
          4           1 

$singles
[1] 2

$chimeras
  total  mapped   multi invalid 
     12       8       7       5 

> head(getPairData(fout, param))
  length orientation insert
1     40           1     40
2     80           1     80
3     60           2     54
4     40           3    160
5     20           1     66
6     80           0    114
> 
> loadChromos(fout)
  anchor1 anchor2
1    chrA    chrA
2    chrB    chrA
3    chrB    chrB
> head(loadData(fout, "chrA", "chrA"))
  anchor1.id anchor2.id anchor1.pos anchor2.pos anchor1.len anchor2.len
1          2          1          49          14          -5          10
2          2          1          79           9         -10          10
3          2          1          65          21          10         -10
4          4          1         156           6         -10         -10
5          4          2         141          80          -5          10
6          4          2         154          50          10          10
> head(loadData(fout, "chrA", "chrB"))
  anchor1.id anchor2.id anchor1.pos anchor2.pos anchor1.len anchor2.len
1          5          2          19          44          10         -10
2          5          3          14         105          10         -10
3          6          1          65          19           5          10
4          6          2          24          90          -5           5
5          6          3          24         100          -5         -10
6          6          3          24          95          -5         -10
Warning message:
In value[[3L]](cond) : anchor definitions are reversed
> 
> # Loading the counts.
> data <- squareCounts(fout, param, width=50, filter=1)
> data
class: InteractionSet 
dim: 10 1 
metadata(2): param width
assays(1): counts
rownames: NULL
rowData names(0):
colnames: NULL
colData names(1): totals
type: ReverseStrictGInteractions
regions: 6
> 
> margins <- marginCounts(fout, param, width=50)
> margins
class: RangedSummarizedExperiment 
dim: 6 1 
metadata(1): param
assays(1): counts
rownames: NULL
rowData names(1): nfrags
colnames: NULL
colData names(1): totals
> totalCounts(fout, param)
[1] 17
> 
> regions <- GRanges("chrA", IRanges(c(1, 100, 150), c(20, 140, 160)))
> connectCounts(fout, param, regions=regions, filter=1L)
class: InteractionSet 
dim: 2 1 
metadata(1): param
assays(1): counts
rownames: NULL
rowData names(0):
colnames: NULL
colData names(1): totals
type: ReverseStrictGInteractions
regions: 3
> 
> # Checking some values.
> head(getArea(data))
[1] 2208 2304 2208 2208 3312 3174
> head(pairdist(data))
[1]  47 140  93  47  NA  NA
> 
> anchors(data, type="first")
GRanges object with 10 ranges and 1 metadata column:
       seqnames    ranges strand |    nfrags
          <Rle> <IRanges>  <Rle> | <integer>
   [1]     chrA     49-94      * |         1
   [2]     chrA   141-188      * |         1
   [3]     chrA   141-188      * |         1
   [4]     chrA   141-188      * |         1
   [5]     chrB      1-69      * |         2
   [6]     chrB      1-69      * |         2
   [7]     chrB      1-69      * |         2
   [8]     chrB      1-69      * |         2
   [9]     chrB     70-92      * |         1
  [10]     chrB     70-92      * |         1
  -------
  seqinfo: 2 sequences from an unspecified genome
> anchors(data, type="second")
GRanges object with 10 ranges and 1 metadata column:
       seqnames    ranges strand |    nfrags
          <Rle> <IRanges>  <Rle> | <integer>
   [1]     chrA      1-48      * |         1
   [2]     chrA      1-48      * |         1
   [3]     chrA     49-94      * |         1
   [4]     chrA    95-140      * |         1
   [5]     chrA      1-48      * |         1
   [6]     chrA     49-94      * |         1
   [7]     chrA    95-140      * |         1
   [8]     chrB      1-69      * |         2
   [9]     chrB      1-69      * |         2
  [10]     chrB     70-92      * |         1
  -------
  seqinfo: 2 sequences from an unspecified genome
> assay(data)
      [,1]
 [1,]    3
 [2,]    1
 [3,]    2
 [4,]    1
 [5,]    1
 [6,]    2
 [7,]    3
 [8,]    1
 [9,]    2
[10,]    1
> regions(data)
GRanges object with 6 ranges and 1 metadata column:
      seqnames    ranges strand |    nfrags
         <Rle> <IRanges>  <Rle> | <integer>
  [1]     chrA      1-48      * |         1
  [2]     chrA     49-94      * |         1
  [3]     chrA    95-140      * |         1
  [4]     chrA   141-188      * |         1
  [5]     chrB      1-69      * |         2
  [6]     chrB     70-92      * |         1
  -------
  seqinfo: 2 sequences from an unspecified genome
> 
> data$totals
[1] 17
> colData(data)
DataFrame with 1 row and 1 column
     totals
  <integer>
1        17
> metadata(data)
$param
Genome contains 7 restriction fragments across 2 chromosomes
No discard regions are specified
No limits on chromosomes for read extraction
No cap on the read pairs per pair of restriction fragments

$width
[1] 50

> 
> asDGEList(data)
An object of class "DGEList"
$counts
   Sample1
1        3
2        1
3        2
4        1
5        1
6        2
7        3
8        1
9        2
10       1

$samples
        group lib.size norm.factors
Sample1     1       17            1

> asDGEList(data, lib.size=20)$samples
        group lib.size norm.factors
Sample1     1       20            1
> asDGEList(data, norm.factors=2, group="a")$samples
        group lib.size norm.factors
Sample1     a       17            2
Warning message:
In DGEList.default(group = "a", lib.size = 17L, norm.factors = 2,  :
  norm factors don't multiply to 1
> 
> # Playing around with some bin counts.
> stuff <- correctedContact(data)
> head(stuff$truth)
[1] 1.517032e+04 6.123523e-01 6.123523e-01 8.162749e-01 2.041633e-01
[6] 2.041633e-01
> 
> data.large <- squareCounts(fout, param, width=100, filter=1)
> boxed <- boxPairs(larger=data.large, smaller=data)
> head(boxed$indices$larger)
[1] 1 2 3 4 5 6
> head(boxed$indices$smaller)
[1] 1 2 2 3 4 4
> 
> head(enrichedPairs(data))
class: InteractionSet 
dim: 6 1 
metadata(2): param width
assays(5): counts quadrant vertical horizontal surrounding
rownames: NULL
rowData names(4): N.quadrant N.vertical N.horizontal N.surrounding
colnames: NULL
colData names(1): totals
type: ReverseStrictGInteractions
regions: 6
> head(clusterPairs(data, tol=10)$indices[[1]])
[1] 1 2 2 2 3 3
> 
> # End.
> 
> unlink(fout)
> 
> proc.time()
   user  system elapsed 
   4.00    0.42    6.53 
